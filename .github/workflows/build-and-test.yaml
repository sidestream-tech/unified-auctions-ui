name: build and test

on:
  pull_request:

jobs:
  build-frontend:
    name: build frontend
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Packages
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.GH_WORKFLOW_USER }}
        password: ${{ secrets.GH_WORKFLOW_TOKEN }}

    - name: Set outputs
      id: vars
      run: echo "git_hash_short=$(git rev-parse --short ${GITHUB_SHA})" >> $GITHUB_OUTPUT

    - name: build and push frontend
      uses: docker/build-push-action@v3
      with:
        file: frontend/Dockerfile
        context: ./
        target: development
        platforms: linux/amd64
        build-args: |
          PRODUCTION_DOMAIN=null.sidestream.tech
          RPC_URL=key-not-provided
          CONTACT_EMAIL=development@sidestream.tech
        tags: |
          ghcr.io/sidestream-tech/unified-auctions-ui/frontend:${{ github.sha }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-core:
    name: build core
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Packages
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.GH_WORKFLOW_USER }}
        password: ${{ secrets.GH_WORKFLOW_TOKEN }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: eu-central-1
        role-to-assume: arn:aws:iam::802385070966:role/GithubActionsSSMRole
        role-session-name: AuctionsUiSession

    - name: Get secrets by name and by ARN
      uses: aws-actions/aws-secretsmanager-get-secrets@v1
      with:
        secret-ids: |
          REMOTE_RPC_URL,auction-ui/localhost/hardhat/remote_rpc_url

    - name: Set outputs
      id: vars
      run: echo "git_hash_short=$(git rev-parse --short ${GITHUB_SHA})" >> $GITHUB_OUTPUT
    
    - name: build and push core
      uses: docker/build-push-action@v3
      with:
        file: core/Dockerfile
        context: ./
        target: development
        platforms: linux/amd64
        build-args: |
          REMOTE_RPC_URL=${{ env.REMOTE_RPC_URL }}
        tags: |
          ghcr.io/sidestream-tech/unified-auctions-ui/core:${{ github.sha }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-hardhat:
    name: build and push hardhat
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Packages
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.GH_WORKFLOW_USER }}
        password: ${{ secrets.GH_WORKFLOW_TOKEN }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: eu-central-1
        role-to-assume: arn:aws:iam::802385070966:role/GithubActionsSSMRole
        role-session-name: AuctionsUiSession

    - name: Get secrets by name and by ARN
      uses: aws-actions/aws-secretsmanager-get-secrets@v1
      with:
        secret-ids: |
          REMOTE_RPC_URL,auction-ui/localhost/hardhat/remote_rpc_url

    - name: Set outputs
      id: vars
      run: echo "git_hash_short=$(git rev-parse --short ${GITHUB_SHA})" >> $GITHUB_OUTPUT
    
    - name: build and push hardhat
      uses: docker/build-push-action@v3
      with:
        file: core/Dockerfile
        context: ./
        target: hardhat
        platforms: linux/amd64
        build-args: |
          PRODUCTION_DOMAIN=null.sidestream.tech
          REMOTE_RPC_URL=${{ env.REMOTE_RPC_URL }}
          CONTACT_EMAIL=development@sidestream.tech
        tags: |
          ghcr.io/sidestream-tech/unified-auctions-ui/core-hardhat:${{ github.sha }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # test:
  #   needs: [build-worker, build-frontend]
  #   name: database integration test
  #   runs-on: ubuntu-latest
  #   container: 
  #     image: ghcr.io/sidestream-tech/audit-tool/backend:${{ github.sha }}
  #     credentials:
  #       username: ${{ secrets.GH_WORKFLOW_USER }}
  #       password: ${{ secrets.GH_WORKFLOW_TOKEN }}
  #   env:
  #     DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
  #   services:
  #     postgres:
  #       image: postgres:14
  #       env:
  #         POSTGRES_DB: postgres
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_PORT: 5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #     gotrue:
  #       image: supabase/gotrue
  #       env:
  #         GOTRUE_API_HOST: gotrue
  #         GOTRUE_OPERATOR_TOKEN: super-secret-operator-token
  #         GOTRUE_JWT_SECRET: super-secret-jwt-token
  #         GOTRUE_JWT_EXP: 3600
  #         GOTRUE_DB_DRIVER: postgres
  #         GOTRUE_SITE_URL: frontend
  #         GOTRUE_MAILER_AUTOCONFIRM: "true"  # disable email confirmation
  #         GOTRUE_LOG_LEVEL: DEBUG
  #         GOTRUE_JWT_DEFAULT_GROUP_NAME: "viewer"
  #         DATABASE_URL: "postgresql://gotrue:postgres@postgres:5432/postgres"

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: migrations
  #     run: |
  #       sleep 10
  #       cd app
  #       npm i
  #       npx prisma migrate deploy

  #   - name: frontend
  #     run: |
  #       cd app
  #       npm run test
